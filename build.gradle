plugins {
    id 'base'
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    //id 'war'
}

//apply plugin: 'war'
//bootWar{
//archiveFileName = "ROOT.war"
//}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //aop
    implementation 'org.springframework:spring-aop:5.2.25.RELEASE'

    //servlet & tomcat
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    //providedCompile 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'jakarta.servlet:jakarta.servlet-api'

    //jsp
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'

    //mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    //querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta",
            "jakarta.annotation:jakarta.annotation-api",
            "jakarta.persistence:jakarta.persistence-api")

    //log4j2
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // log4j2 의존성을 추가해주고, spring-boot-starter-logging을 제외
    configurations {
        // 내부 로깅 프레임워크(Logback)을 제외합니다.
        configureEach {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
    }

    //fileUpload
    // Apache Commons IO
    implementation 'commons-io:commons-io:2.11.0'

    // Apache Commons FileUpload
    implementation 'commons-fileupload:commons-fileupload:1.4'

    //Mapstruct
    // https://mvnrepository.com/artifact/org.mapstruct/mapstruct-processor
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.3.Final")
    // https://mvnrepository.com/artifact/org.mapstruct/mapstruct-processor
    testAnnotationProcessor("org.mapstruct:mapstruct-processor:1.5.3.Final")
    // https://mvnrepository.com/artifact/org.mapstruct/mapstruct
    implementation("org.mapstruct:mapstruct:1.5.3.Final")
    // https://mvnrepository.com/artifact/org.projectlombok/lombok-mapstruct-binding
    implementation("org.projectlombok:lombok-mapstruct-binding:0.2.0")

    //spring security
    implementation "org.springframework.boot:spring-boot-starter-security"

    //oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //StringUtils
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

}


def frontendDir = "$projectDir/src/main/reactfront"
def querydslSrcDir = 'src/main/generated'

sourceSets {
    main {
        resources {
            srcDirs = ["$projectDir/src/main/resources"]
        }
        java {
            srcDirs += [ querydslSrcDir ]
        }
    }
}

compileJava {
    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}
tasks.register('installNodeAndYarn', Exec) {
    commandLine 'npm', 'install', '-g', 'yarn'
}
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslSrcDir))
    options.compilerArgs << "-parameters"
}

clean {
    delete file(querydslSrcDir)
}

processResources { dependsOn "copyReactBuildFiles" }

tasks.register('installReact', Exec) {
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        //commandLine 'npm.cmd', 'install'
        commandLine "yarn.cmd", "install"
    } else {
        //commandLine 'npm', 'install'
        commandLine "yarn", "install"
    }
}

tasks.register('buildReact', Exec) {
    dependsOn "installReact"
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "yarn.cmd", "run", "build"
    } else {
        commandLine "yarn", "run", "build"
    }
}

tasks.register('copyReactBuildFiles', Copy) {
    dependsOn "buildReact"
    from "$frontendDir/build"
    into "$projectDir/src/main/resources/static"
    //into "$projectDir/src/main/webapp" // ROOT 디렉토리에 복사
    //into "$projectDir/"
}

